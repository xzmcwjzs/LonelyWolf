<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Reflection"#>
<#@ import namespace="System.Text" #> 
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using Ninject;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Http;
using System.Web.Mvc;
using MalignantTumorSystem.IBLL;
using MalignantTumorSystem.BLL;

namespace MalignantTumorSystem.WebApplication.Ninject
{
    public partial class NinjectRegister
    {
        private static readonly IKernel Kernel;
        static NinjectRegister()
        {
            Kernel = new StandardKernel();
            AddBindings();
        }

        public static void RegisterFovMvc()
        {
            DependencyResolver.SetResolver(new NinjectDependencyResolverForMvc(Kernel));
        }

        public static void RegisterFovWebApi(HttpConfiguration config)
        {
            config.DependencyResolver = new NinjectDependencyResolverForWebApi(Kernel);
        }
        //绑定接口实现
        private static void AddBindings()
        {
           Kernel.Bind<IBasicInformationService>().To<BasicInformationService>();
<#
       
            string currentPath =Path.GetDirectoryName(this.Host.TemplateFile);
            string solutionPath = currentPath.Substring(0, currentPath.IndexOf(@"\MalignantTumorSystem.WebApplication"));
            string txtFilePath= Path.Combine(solutionPath, @"MalignantTumorSystem.Model\ClassNameTxt\ClassName.txt");  
            string[] ClassNameList =new string[]{""};
            using(StreamReader reader=new StreamReader(txtFilePath)){
                 string classNameStr=reader.ReadToEnd();
                 int index=classNameStr.LastIndexOf(',');
	             classNameStr=classNameStr.Substring(0,index);
                 ClassNameList= classNameStr.Split(',');
          }
 #>
<#
    if(ClassNameList[0]!=""){
foreach (string className in ClassNameList)
{ 
#>		
	        Kernel.Bind<I<#=className#>Service>().To<<#=className#>Service>();
<#}
}#>
        }
    }
}